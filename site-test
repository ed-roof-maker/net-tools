#!/usr/bin/bash
cwdf=$(realpath $0)
cwdd=$(dirname ${cwdf})

AT=${cwdd}
. $AT/constants

f_has_resolution () {
   SITE=$1
   if [ "$SITE" == '' ]
   then
      domains=(startpage.com swisscows.ch google.com wikipedia.org)
      for s in ${domains[@]}
      do
         has_answer=$(nslookup -retry=2 -timeout=30 $s | grep -i -e 'authoritative\sanswer' | wc -l)
         not_found=$(nslookup -retry=2 -timeout=30 $s | grep -i -e "can.*find" | wc -l)
         if [ $has_answer -ge 1 ]
         then
            echo OK
            return
         fi
      done
      echo FAIL
   else
      has_answer=$(nslookup -retry=2 -timeout=30 $SITE | grep -i -e 'authoritative\sanswer' | wc -l)
      not_found=$(nslookup -retry=2 -timeout=30 $SITE | grep -i -e "can.*find" | wc -l)
      if [ $has_answer -ge 1 ]
      then
         echo OK
      else
         echo FAIL
      fi
   fi
}

f_has_flags () {
   SITE=$1
   O_MODE=$2
   # has authenticated date
   has_ad=$(dig $SITE +dnssec +timeout=5 +tries=2 | grep flags | grep ad | wc -l)
   # the recursive server is dnssec aware
   has_do=$(dig $SITE +dnssec +timeout=5 +tries=2 | grep flags | grep do | wc -l)
   # has additional signature
   has_rrsig=$(dig $SITE +dnssec +timeout=5 +tries=2 | grep RRSIG | wc -l)
   # passes delv
   delv_ok=$(delv $SITE | grep -i -e 'fully\svalidated' | wc -l)
   if [ "$O_MODE" == '--neg-test' ]
   then
      neg_test_ok=$(delv $SITE | grep -i -e 'fully\svalidated' | grep -i -e 'negative' | wc -l)
      has_servfail=$(delv $SITE | grep -i -e 'SERVFAIL' | wc -l)
      empty_ok=$(delv $SITE | wc -l)  # This means a dns lookup not found
      if [ $neg_test_ok -ge 1 ] || [[ ($has_do -ge 1) && ($has_servfail -ge 1) ]]
      then
         echo OK
      else
         if [ $empty_ok -eq 0 ]
         then
            echo NA
         else
            echo FAIL
         fi
      fi
   else
      if [ $has_ad -ge 1 ] && [ $has_do -ge 1 ] && [ $has_rrsig -ge 1 ] && [ $delv_ok -ge 1 ]
      then
         echo OK
      else
         echo 'DNSSEC - has ad? '$has_ad
         echo 'DNSSEC - has do? '$has_do
         echo 'DNSSEC - has rrsig? '$has_rssig
         echo 'DNSSEC - delv validated? '$delv_ok
         echo FAIL
      fi
   fi
}


A_SITE=$1
A_PORT=$2

max=6
ok=0
dnssec_configured_working=$(f_has_flags $A_SITE | grep OK | wc -l)
if [ $dnssec_configured_working -ge 1 ]
then
   ok=$(( $ok + 3 ))
   f_pok 'It has correctly configured DNSSEC.'
else
   f_perr 'No DNSSEC configured.'
fi
issuer=0
has_tls13=$(curl -v -s --tlsv1.3 https://$A_SITE:$A_PORT 2>/dev/null >/dev/null;echo $? | grep -e 0 -e 52 | wc -l)
if [ $has_tls13 -ge 1 ]
then
   ok=$(( $ok + 3))
   f_pok 'It is connectable via TLS1.3'
else
   has_tls12=$(curl -v -s --tlsv1.2 https://$A_SITE:$A_PORT 2>/dev/null >/dev/null;echo $? | grep -e 0 -e 52 | wc -l)
   if [ $has_tls12 -ge 1 ]
   then
      ok=$(( $ok + 2))
      f_pwarn 'It is only connectable via TLS1.2'
   else
      f_perr 'Bad SSL config. TLS is too old.'
   fi
fi

score="$ok/$max"
f_pdone 'Site connection security score is '$score' for site - '$A_SITE
if [ $ok -lt 3 ]
then
   f_perr 'Score is too low for business trust.'
   exit 1
else
   f_pok 'Score is good for business trust.'
   exit 0
fi


